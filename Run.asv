%% Set Parameters and load all data
clear
clc
close all

debug_mode = false;
filter_data = 1;
g = 9.8; %unclear whether this should be +/-, flipping sign flips o vectors
file = 5
lambda = .01;

load_and_clean_data;
%% Perform Optimization for j vectors

% Create the problem structure.
manifold = spherefactory(3);
N = powermanifold(manifold, 2);
problem.M = N;

% Define the problem cost function and its gradient.
problem.cost  = @(x) costfunction_jvectors(x,g1,g2);
problem.egrad = @(x) evalgradient_jvectors(x,g1,g2);
if debug_mode
    figure
    checkgradient(problem)
end

% Solve.
warning('off', 'manopt:getHessian:approx')
[x, xcost, info] = trustregions(problem);
j1 = x(1,:);
j2 = x(2,:);
% Manopt returns a cell array, need to convert back to a vector
j1 = j1{1}';
j2 = j2{1}';

if j1(1) < 0
    j1 = -j1;
end
if j2(2) > 0
    j2 = -j2;
end

%This isn't particularly necessary, except for comparing to the brute-force
%approach. i.e. theta/phi representation is not used for computation.
[target_theta1 target_phi1 ~] = cart2sph(x{1}(1), x{1}(2), x{1}(3));
[target_theta2 target_phi2 ~] = cart2sph(x{2}(1), x{2}(2), x{2}(3));
if debug_mode
    [target_theta1 target_phi1]
    [target_theta2 target_phi2]
    figure;
    semilogy([info.iter], [info.gradnorm], '.-');
    xlabel('Iteration #');
    ylabel('Gradient norm');
    title('Convergence of the trust-regions algorithm on the sphere');
end

%% Perform Optimization for o vectors

% Create the problem structure.
manifold = euclideanfactory(2,3);
problem.M = manifold;

% Define the problem cost function and its gradient.
problem.cost  = @(x) costfunction_ovectors(x, g1, g2, g1dot, g2dot, a1, a2);
problem.egrad = @(x) evalgradient_ovectors(x, g1, g2, g1dot, g2dot, a1, a2);
if debug_mode
    figure
    checkgradient(problem)
end

% Solve.
warning('off', 'manopt:getHessian:approx')
% options.tolgradnorm = 1e-12;
options.useRand = true;
[x, xcost, info] = trustregions(problem, [], options);

%Manopt returns the 2 o_hat vectors
o1hat = x(1,:)
o2hat = x(2,:)
%Shift the o_hat vectors to the closest point along the joint axis
[o1, o2] = optimizeO(o1hat, o2hat, j1, j2);

%% Get the gyroscope-based flextion/extension angle
j1_r = repmat(j1,size(g1,1),1);
j2_r = repmat(j2,size(g2,1),1);
term1 = dot(g1,j1_r,2);
term2 = dot(g2,j2_r,2);
alpha_gyr = pi - cumtrapz(T1,term1-term2);
figure
plot(T1,alpha_gyr,'k')
title('Gyroscope-based flexion/extension angle')

%% Get the accelerometer-based flexion/extension angle
o1_r = repmat(x(1,:), [size(g1,1) 1]);
o2_r = repmat(x(2,:), [size(g1,1) 1]);
gamma1 = cross(g1, cross(g1, o1_r)) + cross(g1dot, o1_r);
gamma2 = cross(g2, cross(g2, o2_r)) + cross(g2dot, o2_r);

%Shifted accelerations onto the joint axes
a1_t = a1 - gamma1;
a2_t = a2 - gamma2; 

%Find the random vector c, which can not be || with j1 or j2
ok = false;
while ~ok
    c = rand(1,3);
    c = c/norm(c); %Make it a unit vector
    if (dot(c,j1) < .8) && (dot(c,j2) <= .8)
        ok = true;
    end
end
c = [0.5664 0.8237 0.0277];
x1 = cross(j1,c);
y1 = cross(j1,x1);
% z1 = cross(x1,y1);
x2 = cross(j2,c);
y2 = cross(j2,x2);
% z2 = cross(x2,y2);
% z1 = z1/norm(z1);
% z2 = z2/norm(z2);

%Now project the accelerations onto the joint plane
x1_r = repmat(x1,size(a1,1),1);
y1_r = repmat(y1,size(a1,1),1);
x2_r = repmat(x2,size(a1,1),1);
y2_r = repmat(y2,size(a1,1),1);

a1x = dot(a1_t, x1_r, 2);
a1y = dot(a1_t, y1_r, 2);
a2x = dot(a2_t, x2_r, 2);
a2y = dot(a2_t, y2_r, 2);

%Need to be careful here with dimensions...
v1 = [a1x a1y];
v2 = [a2x a2y];
dots = dot(v1,v2,2);
crosses = a1x.*a2y - a1y.*a2x;

alpha_acc = atan2(dots, crosses)+pi/2;
figure
plot(T1, alpha_acc)
title('Acceleration-based flexion/extension angle');

alpha_c = zeros(length(T1),1);
alpha_c(1) = alpha_gyr(1);
for k = 2:length(T1)
    alpha_c(k) = lambda*alpha_acc(k)+(1-lambda)*(alpha_c(k-1)+alpha_gyr(k)-alpha_gyr(k-1));
end

figure
plot(T1, alpha_c)
title('Combined angle')
    








